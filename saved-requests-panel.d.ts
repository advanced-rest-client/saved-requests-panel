/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   saved-requests-panel.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/utils/render-status.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../iron-icon/iron-icon.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../paper-menu-button/paper-menu-button.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../paper-listbox/paper-listbox.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-progress/paper-progress.d.ts" />
/// <reference path="../paper-toast/paper-toast.d.ts" />
/// <reference path="../paper-dialog/paper-dialog.d.ts" />
/// <reference path="../bottom-sheet/bottom-sheet.d.ts" />
/// <reference path="../saved-request-detail/saved-request-detail.d.ts" />
/// <reference path="../saved-request-editor/saved-request-editor.d.ts" />
/// <reference path="../paper-fab/paper-fab.d.ts" />
/// <reference path="../requests-list-mixin/requests-list-mixin.d.ts" />
/// <reference path="../projects-list-consumer-mixin/projects-list-consumer-mixin.d.ts" />
/// <reference path="../paper-chip-input/paper-chip-input.d.ts" />
/// <reference path="../saved-list-mixin/saved-list-mixin.d.ts" />
/// <reference path="saved-panel-list.d.ts" />

declare namespace UiElements {

  /**
   * Saved requests panel for ARC.
   *
   * Contains complete UI to support saved requests view.
   *
   * ### Styling
   *
   * `<saved-requests-panel>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--saved-requests-panel` | Mixin applied to the element | `{}`
   * `--arc-font-headline` | Mixin applied to the header | `{}`
   * `--arc-font-subhead` | Mixin applied to the subheader | `{}`
   * `--saved-requests-panel-loader` | Mixin applied to the loader element | `{}`
   * `--saved-requests-panel-list` | Mixin apllied to the list element | `{}`
   * `--saved-requests-panel-toast-revert-button` | Mixin appllied to the revert button in the data delete confirmation toast | `{}`
   * `--warning-primary-color` | Main color of the warning messages | `#FF7043`
   * `--warning-contrast-color` | Contrast color for the warning color | `#fff`
   * `--error-toast` | Mixin applied to the error toast | `{}`
   * `--empty-info` | Mixin applied to the label rendered when no data is available. | `{}`
   * `--saved-requests-panel-fab-background-color` | Color of the fab button in the details panel | `--primary-color`
   * `--saved-requests-panel-bottom-sheet` | Mixin apllied to the `<bottom-sheet>` elements | `{}`
   * `--context-menu-item-color` | Color of the dropdown menu items | ``
   * `--context-menu-item-background-color` | Background olor of the dropdown menu items | ``
   * `--context-menu-item-color-hover` | Color of the dropdown menu items when hovering | ``
   * `--context-menu-item-background-color-hover` | Background olor of the dropdown menu items when hovering | ``
   */
  class SavedRequestsPanel extends
    ArcComponents.RequestsListMixin(
    ArcComponents.ProjectsListConsumerMixin(
    ArcComponents.SavedListMixin(
    Object))) {

    /**
     * List of requests that has been recently removed
     */
    _latestDeleted: any[]|null|undefined;

    /**
     * Computed value, true if the requests lists is hidden.
     */
    readonly listHidden: boolean|null|undefined;

    /**
     * Selected items list.
     */
    selectedItems: Array<object|null>|null;

    /**
     * Computed value, true when the user made a selection on the list.
     */
    readonly hasSelection: boolean|null|undefined;

    /**
     * When true the editor panel is rendered
     */
    editorOpened: boolean|null|undefined;

    /**
     * When true the details panel is rendered
     */
    detailsOpened: boolean|null|undefined;

    /**
     * List of selected in the dialog project names.
     */
    selectedProjects: Array<String|null>|null;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Notifies the list that the resize event occurred.
     * Should be called whhen content of the list changed but the list wasn't
     * visible at the time.
     */
    notifyResize(): void;

    /**
     * Computes value of the `listHidden` property.
     * List is hidden when no requests are found and it is not searching.
     */
    _computeListHidden(hasRequests: Boolean|null, isSearch: Boolean|null): Boolean|null;

    /**
     * Handler for navigate action from the list
     */
    _navigateHandler(): void;

    /**
     * Opens the request details applet with the request.
     */
    _onDetails(e: CustomEvent|null): void;

    /**
     * Fires `navigate` event for currently loaded in the details request.
     */
    _loadRequestDetails(): void;

    /**
     * Handler for search event from search input.
     */
    _searchHandler(e: Event|null): void;

    /**
     * Handles items delete event from item click.
     */
    _deleteSelected(): Promise<any>|null;

    /**
     * Deletes a request from the details panel.
     */
    _deleteRequestDetails(): Promise<any>|null;

    /**
     * Performs a delete action of request items.
     *
     * @param deleted List of deleted items.
     */
    _delete(deleted: Array<object|null>|null): Promise<any>|null;

    /**
     * Dispatches `request-objects-deleted` event.
     *
     * @param deleted List of requests to delete.
     */
    _dispatchDelete(deleted: Array<object|null>|null): CustomEvent|null;

    /**
     * Restores removed requests.
     * It does nothing if `_latestDeleted` is not set or empty.
     *
     * @returns A promise resolved when objects were restored
     */
    revertDeleted(): Promise<any>|null;

    /**
     * Dispatches `request-objects-undeleted` event.
     *
     * @param items List of deleted requests. The list
     * contains objects with `_id` and `_rev` properties.
     */
    _dispatchUndelete(items: Array<object|null>|null): CustomEvent|null;

    /**
     * Forces selection menu to close.
     */
    _closeSelectionMenu(): void;

    /**
     * Calles `_exportItems()` with default destination (`file`)
     */
    _exportSelected(): void;

    /**
     * Calles `_exportItems()` with destination set to `drive`
     */
    _exportSelectedDrive(): void;

    /**
     * Forces main menu to close.
     */
    _closeMainMenu(): void;

    /**
     * Menu handler to export all project data to Drive
     */
    _onExportAllDrive(): void;

    /**
     * Menu handler to export all project data to file
     */
    _onExportAll(): void;

    /**
     * Requests application to export all data to `destination`.
     * This works with `arc-data-export` element.
     *
     * @param destination One of the supporting destinations
     * in `arc-data-export`.
     */
    _exportAll(destination: String|null): void;

    /**
     * Dispatches `export-data` event and returns it.
     *
     * @param destination A place where export the data (file, drive)
     */
    _dispatchExportData(destination: String|null, requests: Array<object|null>|Boolean|null): CustomEvent|null;

    /**
     * Dispatches the `export-project` event with relevant data.
     */
    _exportItems(destination: String|null): void;

    /**
     * Handler for delete all menu option click.
     */
    _deleteAllClick(): void;

    /**
     * Called when delete datastore dialog is closed.
     */
    _onClearDialogResult(e: CustomEvent|null): void;

    /**
     * Removes all data from the datastore and then fires
     */
    _clearDatastore(): void;

    /**
     * Dispatches `destroy-model` with `saved` on the models list.
     */
    _dispatchDeleteModel(): CustomEvent|null;

    /**
     * Opens request details editor in place of the request details applet.
     */
    _editRequestDetails(): void;
    _resizeSheetContent(e: any): void;
    _cancelRequestEdit(): void;

    /**
     * Handler to save the request event from the editor.
     */
    _saveRequestEdit(): void;
    _computeHasSelection(length: any): any;

    /**
     * Computes a proper key command depending on the platform.
     *
     * @param key The key modifier for the command
     * @returns Keyboard command for the key.
     */
    _computeA11yCommand(key: String|null): String|null;

    /**
     * Handles menu click for adding selected requests to a project.
     */
    _projectSelected(): void;

    /**
     * Cancels adding to project dialog.
     */
    cancelAddProject(): void;

    /**
     * Updates requests objects with projects ids.
     *
     * @param requests List of requests to update
     * @param ids List of project IDs.
     */
    _updateRequestsProjects(requests: Array<object|null>|null, ids: Array<String|null>|null): Array<object|null>|null;

    /**
     * Adds selected requests to a project.
     */
    _addSelectedProject(): Promise<any>|null;

    /**
     * Dispatches `project-update-bulk` custom event and returns event's
     * promise.
     *
     * @param names List of names.
     * @param requestIds List of request IDs to associate with the project.
     */
    _createProjects(names: Array<String|null>|null, requestIds: Array<String|null>|null): Promise<Array<object|null>|null>;
    _prepareProjectsIdsList(created: any, ids: any): any;
  }
}

interface HTMLElementTagNameMap {
  "saved-requests-panel": UiElements.SavedRequestsPanel;
}
