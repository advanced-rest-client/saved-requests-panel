/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/SavedPanelList.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css} from 'lit-element';

import {HistoryPanelList} from '@advanced-rest-client/history-panel/src/HistoryPanelList.js';

export {SavedPanelList};

declare namespace ApiElements {

  /**
   * `saved-panel-list`
   *
   * ## Styling
   *
   * `<saved-panel-list>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--saved-panel-list` | Mixin applied to this elment | `{}`
   * `--saved-panel-list-url-label` | Mixin applied to the list container | `{}`
   * `--saved-panel-list-secondary-action-color` | Color of the secondary action button | `--primary-color`
   * `--saved-panel-list-url-label` | Mixin applied to the URL label | `{}`
   * `--saved-panel-list-method-label` | Mixin applied to the method label | `{}`
   */
  class SavedPanelList extends HistoryPanelList {
    draggableEnabled: any;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    render(): any;
    _listItemDetailsTemplate(item: any): any;

    /**
     * Handler for the `dragstart` event added to the list item when `draggableEnabled`
     * is set to true.
     * This function sets request data on the `dataTransfer` object with `arc/request-object`
     * mime type. The request data is a serialized JSON with request model.
     */
    _dragStart(e: Event|null): void;
    _dropTargetTemplate(): any;
    _draggableChanged(value: any): void;
    _addDndEvents(): void;
    _removeDndEvents(): void;

    /**
     * Handler for `dragover` event on this element. If the dagged item is compatible
     * it renders drop message.
     */
    _dragoverHandler(e: DragEvent|null): void;

    /**
     * Handler for `dragleave` event on this element. If the dagged item is compatible
     * it hides drop message.
     */
    _dragleaveHandler(e: DragEvent|null): void;

    /**
     * Handler for `drag` event on this element. If the dagged item is compatible
     * it adds request to saved requests.
     */
    _dropHandler(e: DragEvent|null): void;

    /**
     * Dispatches (by calling `_dispatch() function`) `save-request` event
     * which is handled by request model to create new request.
     * The function do not need to do anything else since request change listeners
     * will insert the request to the list when saved.
     *
     * @param request The request to store.
     */
    _appendRequest(request: object|null): CustomEvent|null;
  }
}
