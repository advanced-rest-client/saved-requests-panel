/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   saved-panel-list.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/utils/render-status.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-item/paper-item-body.d.ts" />
/// <reference path="../paper-ripple/paper-ripple.d.ts" />
/// <reference path="../requests-list-mixin/requests-list-styles.d.ts" />
/// <reference path="../iron-list/iron-list.d.ts" />
/// <reference path="../http-method-label/http-method-label.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../iron-scroll-threshold/iron-scroll-threshold.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../paper-checkbox/paper-checkbox.d.ts" />

declare namespace ApiElements {

  /**
   * `saved-panel-list`
   *
   * ## Styling
   *
   * `<saved-panel-list>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--saved-panel-list` | Mixin applied to this elment | `{}`
   * `--saved-panel-list-url-label` | Mixin applied to the list container | `{}`
   * `--saved-panel-list-secondary-action-color` | Color of the secondary action button | `--primary-color`
   * `--saved-panel-list-url-label` | Mixin applied to the URL label | `{}`
   * `--saved-panel-list-method-label` | Mixin applied to the method label | `{}`
   */
  class SavedPanelList extends Polymer.Element {
    requests: any[]|null|undefined;

    /**
     * A list lower treshold when the `history-list-threshold` will be
     * fired. It should informa the app that the user nearly reached
     * the end of the list and new items should be loaded.
     */
    threshold: number|null|undefined;

    /**
     * Scroll target for `iron-scroll-threshold`.
     * This is set in connectedCallback as the DOM has to be initialized
     * before setting this property.
     */
    _scrollTarget: Element|null;

    /**
     * List of selected items on the list.
     */
    selectedItems: any[]|null|undefined;

    /**
     * When set the list items are rendered having 2 lines.
     */
    hasTwoLines: Boolean|null;

    /**
     * Adds draggable property to the request list item element.
     * The `dataTransfer` object has `arc/request-object` mime type with
     * serialized JSON with request model.
     */
    draggableEnabled: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _draggableChanged(value: any): void;
    _addDndEvents(): void;
    _removeDndEvents(): void;

    /**
     * Notifies the list that the resize event occurred.
     * Should be called whhen content of the list changed but the list wasn't
     * visible at the time.
     */
    notifyResize(): void;
    _thresholdHandler(e: any): void;
    _requestsChanged(record: any): void;
    _requestDetails(e: any): void;
    _navigateItem(e: any): void;
    _toggleSelection(e: any): void;

    /**
     * Computes list item row class
     *
     * @param selected True if the item was selected
     * @returns Item class name dependeing on selection state
     */
    _computeRowClass(selected: Boolean|null): String|null;

    /**
     * Handler for the `dragstart` event added to the list item when `draggableEnabled`
     * is set to true.
     * This function sets request data on the `dataTransfer` object with `arc/request-object`
     * mime type. The request data is a serialized JSON with request model.
     */
    _dragStart(e: Event|null): void;

    /**
     * Computes value for the `draggable` property of the list item.
     * When `draggableEnabled` is set it returns true which is one of the
     * conditions to enable drag and drop on an element.
     *
     * @param draggableEnabled Current value of `draggableEnabled`
     * @returns `true` or `false` (as string) depending on the argument.
     */
    _computeDraggableValue(draggableEnabled: Boolean|null): String|null;

    /**
     * Handler for `dragover` event on this element. If the dagged item is compatible
     * it renders drop message.
     */
    _dragoverHandler(e: DragEvent|null): void;

    /**
     * Handler for `dragleave` event on this element. If the dagged item is compatible
     * it hides drop message.
     */
    _dragleaveHandler(e: DragEvent|null): void;

    /**
     * Handler for `drag` event on this element. If the dagged item is compatible
     * it adds request to saved requests.
     */
    _dropHandler(e: DragEvent|null): void;

    /**
     * Dispatches (by calling `_dispatch() function`) `save-request` event
     * which is handled by request model to create new request.
     * The function do not need to do anything else since request change listeners
     * will insert the request to the list when saved.
     *
     * @param request The request to store.
     */
    _appendRequest(request: object|null): CustomEvent|null;
  }
}

interface HTMLElementTagNameMap {
  "saved-panel-list": ApiElements.SavedPanelList;
}
